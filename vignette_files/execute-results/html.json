{
  "hash": "464e3acb8bf41a550cb4fda9943927aa",
  "result": {
    "markdown": "---\ntitle: \"IDEANet R Vignette\"\n---\n\n\nThe goal of the **IDEANet** program is to lower the barrier of entry to network analysis for scholars interested in relational measurement. Some researchers may have data and questions that are suitable to network analysis. And yet, getting comfortable with the tools available in R can prove to be an arduous and time consuming task.\n\n**IDEANet** is a set of functions which leverages existing network analysis packages in R (igraph, network, sna) to provide high quality measurements seamlessly from the starting data. The team behind IDEANet in collaboration with the Duke University Library Services have also created a repository of publicly available network datasets which researchers can pull from or host their own data. If you are interested in hosting your own data, feel free to fill out the form available on our Database page.\n\nIDEANet is supported by the National Science Foundation as part of the Human Networks and Data Science - Infrastructure program (BCS-2024271 and BCS-2140024).\n\n\n\n# Getting Set Up\n\nLets begin by importing IDEANet. IDEANet is currently available only as a Github package and requires a direct download using devtools.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(devtools)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: usethis\n```\n:::\n\n```{.r .cell-code}\ninstall_github(\"https://github.com/Tom-Wolff/ideanet\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nSkipping install of 'ideanet' from a github remote, the SHA1 (a5f256cd) has not changed since last install.\n  Use `force = TRUE` to force installation\n```\n:::\n\n```{.r .cell-code}\nlibrary(ideanet)\n```\n:::\n\n\nIn this vignette, we will be using the datasets included with the package. IDEANet comes with a variety of datasets we can explore using the `data()` function\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(package = \"ideanet\")\n```\n:::\n\n\nIn this vignette, we will use the Fauxmesa dataset. The data represents a simulation of friendships among students in a school. The data are directed, unweighted and contain a single layer of friendships. We also know some things about these students -- what grade they are in (\"grade\"), what race they identify with (\"race\") and what sex they identify with (\"sex\").\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(fauxmesa)\n\nhead(fauxmesa_edges)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  from to\n1    1 25\n2    1 52\n3    1 58\n4    1 70\n5    1 87\n6    1 92\n```\n:::\n\n```{.r .cell-code}\nhead(fauxmesa_nodes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  id grade  race sex\n1  1     7  Hisp   F\n2  2     7  Hisp   F\n3  3    11 NatAm   M\n4  4     8  Hisp   M\n5  5    10 White   F\n6  6    10  Hisp   F\n```\n:::\n:::\n\n\nThis data is amenable to network analysis. But the implementation of network analysis in R is far from straightforward: the available tools in R are shared between several packages, each with their own strengths and weaknesses. This breadth of options can make it difficult to produce reliable results by making the correct function for a given measurement difficult to identify and, at worst, packages conflicting with each other and relying on different assumptions about the data. For many researchers, this can prove to be an effective deterrent when engaging in network analysis.\n\nIDEANet allows the researcher to directly input their data and retrieve high-quality measurement in a format that facilitates subsequent analysis.\n\n# Reading in Files: Netread()\n\nAlternatively, the user can import their own data. IDEANet provides a useful module that ingests a variety of data formats and converts them to a shape expected by further IDEANet modules...\n\n# Core Analysis: Netwrite()\n\n## Running netwrite()\n\nThe central analysis component of IDEANet is accessed via the `netwrite()` function. `Netwrite()` comes with a breadth of arguments described in the `netwrite()` documentation. The documentation can be accessed with the following code, or by via our webpage (link).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?netwrite()\n```\n:::\n\n\nReturning to our high-school example, we can ask IDEANet to return basic network measurements on the network by including some basic arguments: what kind of network object we are using -- in this case, an edgelist -- and some information about sources, targets and their directionality.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnetwrite(data_type = \"edgelist\", \n         i_elements = fauxmesa_edges$from, \n         j_elements = fauxmesa_edges$to,\n         directed = T)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n(Bonacich power centrality) Adjacency matrix for network is singular. Network will be treated as undirected in order to calculate measures\n\n(Bonacich power centrality) Adjacency matrix for network is singular. Network will be treated as undirected in order to calculate measures\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n(Eigenvector centrality) Adjacency matrix for network is singular. Network will be treated as undirected in order to calculate measures\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n(Eigenvector centrality) Network consists of 2+ unconnected components. Eigenvector centrality scores will be calculated for nodes based on their position within their respective components.\n```\n:::\n:::\n\n\nNetwrite() includes a series of warnings that warns you about the way certain measurements are calculated. In this case, while most metrics are calculated as directed (as we requested in the function), some functions such as power centrality and eigenvector centrality require interpreting the network as undirected.\n\nWhile this successfully returned the metric we will be exploring further in this vignette, netwrite() has additional quality of life arguments that we can use with our example. For example, we want to include node level attributes and change the name of our output network.\n\nHowever, notice that there are students in our nodelist that don't exist in our edgelist.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetdiff(fauxmesa_nodes$id, fauxmesa_edges$from) %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  3  4  6  7 10 12\n```\n:::\n:::\n\n\nThis is usually difficult for igraph to handle. In this case, netwrite() will consider additional student's as isolates in the network, and provide a warning that it is doing so.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(list=ls()) # get a clean slate\n\ndata(fauxmesa) # bring in our data again\n\nnetwrite(data_type = \"edgelist\", \n         i_elements = fauxmesa_edges$from, \n         j_elements = fauxmesa_edges$to,\n         directed = T,\n         nodelist = fauxmesa_nodes$id,\n         net_name = \"fauxmesa_network\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n(Bonacich power centrality) Isolates detected in network. Isolates will be removed from network when calculating power centrality measure, and will be assigned NA values in final output.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n(Bonacich power centrality) Adjacency matrix for network is singular. Network will be treated as undirected in order to calculate measures\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n(Bonacich power centrality) Isolates detected in network. Isolates will be removed from network when calculating power centrality measure, and will be assigned NA values in final output.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n(Bonacich power centrality) Adjacency matrix for network is singular. Network will be treated as undirected in order to calculate measures\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n(Eigenvector centrality) Isolates detected in network. Isolates will be removed from network when calculating eigenvector centrality measure, and will be assigned NA values in final output.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n(Eigenvector centrality) Adjacency matrix for network is singular. Network will be treated as undirected in order to calculate measures\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n(Eigenvector centrality) Network consists of 2+ unconnected components. Eigenvector centrality scores will be calculated for nodes based on their position within their respective components.\n```\n:::\n:::\n\n\n## Netwrite() interpretation\n\nNetwrite() offers a variety of outputs that facilitate a clear interpretation of the network structure. Starting from the top, the output contains system level measures that tell the researcher about the network's overall characteristics.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsystem_measure_plot\n```\n\n::: {.cell-output-display}\n![](vignette_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n\nThese measurements are also available in traditional table form.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsystem_level_measures %>% rmarkdown::paged_table()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"measure_labels\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"measure_descriptions\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"measures\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"Type of Graph\",\"2\":\"Type of graph (either directed or undirected)\",\"3\":\"Directed\"},{\"1\":\"Weighted\",\"2\":\"Whether or not edges in the graph have weights\",\"3\":\"No\"},{\"1\":\"Number of Nodes\",\"2\":\"The number of nodes in the graph\",\"3\":\"205\"},{\"1\":\"Number of Ties\",\"2\":\"The number of ties in the graph\",\"3\":\"203\"},{\"1\":\"Number of Tie Types\",\"2\":\"The number of types of tie in the graph (if multi-relational)\",\"3\":\"NA\"},{\"1\":\"Number of isolates\",\"2\":\"The number of nodes in the network without any ties to other nodes\",\"3\":\"57\"},{\"1\":\"Number of self-loops\",\"2\":\"The number of edges in the network that whose origin and target are the same node\",\"3\":\"0\"},{\"1\":\"Density (Undirected)\",\"2\":\"The proportion of possible ties in the network that actually exist when treating edges as being undirected\",\"3\":\"0.00970827355332377\"},{\"1\":\"Density (Directed)\",\"2\":\"The proportion of possible ties in the network that actually exist when treating edges as being directed\",\"3\":\"0.00485413677666188\"},{\"1\":\"Number of Weak Components\",\"2\":\"The number of weak components in the graph\",\"3\":\"68\"},{\"1\":\"Size of Largest Weak Component\",\"2\":\"The number of nodes in the largest weak component of the graph\",\"3\":\"120\"},{\"1\":\"Proportion in the Largest Weak Component\",\"2\":\"The proportion of nodes in the largest weak component of the graph\",\"3\":\"0.585365853658537\"},{\"1\":\"Number of Strong Components\",\"2\":\"The number of strong components in the graph\",\"3\":\"205\"},{\"1\":\"Size of Largest Strong Component\",\"2\":\"The number of nodes in the largest strong component of the graph\",\"3\":\"1\"},{\"1\":\"Proportion in the Largest Strong Component\",\"2\":\"The proportion of nodes in the largest strong component of the graph\",\"3\":\"0.0048780487804878\"},{\"1\":\"Number of Largest Bicomponents\",\"2\":\"The number of maximally-sized bicomponents in the graph\",\"3\":\"1\"},{\"1\":\"Size of Largest Bicomponent(s)\",\"2\":\"The number of nodes in the largest bicomponent(s) of the graph\",\"3\":\"55\"},{\"1\":\"Proportion in the Largest Bicomponent(s)\",\"2\":\"The proportion of nodes in the largest bicomponent(s) of the graph\",\"3\":\"0.268292682926829\"},{\"1\":\"Number of Mutual Ties\",\"2\":\"The number of mutual ties in the graph\",\"3\":\"0\"},{\"1\":\"Number of Asymmetric Ties\",\"2\":\"The number of asymmetric ties in the graph\",\"3\":\"203\"},{\"1\":\"Number of Null Ties\",\"2\":\"The number of null ties in the graph\",\"3\":\"20707\"},{\"1\":\"Degree Assortativity\",\"2\":\"Edgewise correlation of degree\",\"3\":\"-0.0924105191478259\"},{\"1\":\"Reciprocity Rate\",\"2\":\"The proportion of directed ties that are reciprocated\",\"3\":\"0\"},{\"1\":\"Transitivity Rate\",\"2\":\"The proportion of two-step paths that are also one-step paths\",\"3\":\"0.288372093023256\"},{\"1\":\"Transitivity Correlation\",\"2\":\"The observed correlation between a tie and the number of two-step paths connecting the two nodes in a tie\",\"3\":\"0.258199850335581\"},{\"1\":\"Global Clustering Coefficient\",\"2\":\"The proportion of closed triangles to all triangles\",\"3\":\"0.282245827010622\"},{\"1\":\"Average Geodesic\",\"2\":\"The average shortest path length\",\"3\":\"1.66583541147132\"},{\"1\":\"Multi-Level Edge Correlation\",\"2\":\"Multiplex networks edgwise correlation of relations\",\"3\":\"Singleplex Network\"},{\"1\":\"Pairwise Reachability (Weak, Undirected)\",\"2\":\"The proportion of nodes that share a weak component (undirected)\",\"3\":\"0.342802486848398\"},{\"1\":\"Pairwise Reachability (Strong, Undirected)\",\"2\":\"The proportion of nodes that share a strong component (undirected)\",\"3\":\"0.342802486848398\"},{\"1\":\"Pairwise Reachability (Weak, Directed)\",\"2\":\"The proportion of nodes that share a weak component (directed)\",\"3\":\"0.342802486848398\"},{\"1\":\"Pairwise Reachability (Strong, Directed)\",\"2\":\"The proportion of nodes that share a strong component (directed)\",\"3\":\"0\"},{\"1\":\"Singular Matrix\",\"2\":\"Whether corresponding adjacency matrix is singular. If 'Yes', network is treated as undirected when calculating Eigenvector and Bonacich centrality measures.\",\"3\":\"Yes\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nNetwrite() also outputs a graph object that contains each node and edge-level measurement computed within the function. This graph object allows for traditional network manipulation, such as plotting.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(fauxmesa_network, vertex.label = NA, vertex.size = 3, edge.arrow.size = 0.2)\n```\n\n::: {.cell-output-display}\n![](vignette_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nNote that the output network can contain both isolates and self-loops. Isolates were included when we defined a list of node ids (including isolate) in the \"nodelist\" argument of netwrite(). There is currently no method for removing self-loops within netwrite() - instead, the user is expected to remove any unwanted edges before reading them into netwrite().\n\nIn addition to the full network, researchers may be interested in the shape of major sub-components. Netwrite outputs two additional graph objects: the largest component in the network.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(largest_component, vertex.label = NA, vertex.size = 3, edge.arrow.size = 0.2, \n     main = \"largest component\")\n```\n\n::: {.cell-output-display}\n![](vignette_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nAnd the largest bi-component of the network.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(largest_bi_component, vertex.label = NA, vertex.size = 3, edge.arrow.size = 0.2, \n     main = \"largest bi-component\")\n```\n\n::: {.cell-output-display}\n![](vignette_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nNetwrite() also outputs an edgelist dataframe of the same length as the input edges. This edgelist object contains unique dyad-level ids, internal ego and alter ids, the original id values and weights (uniformly set to 1 if no weights are defined).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(edgelist) %>% rmarkdown::paged_table()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"Obs_ID\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"i_elements\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"i_id\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"j_elements\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"j_id\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"weight\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1\",\"2\":\"1\",\"3\":\"0\",\"4\":\"25\",\"5\":\"24\",\"6\":\"1\",\"_rn_\":\"1\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"0\",\"4\":\"52\",\"5\":\"51\",\"6\":\"1\",\"_rn_\":\"2\"},{\"1\":\"3\",\"2\":\"1\",\"3\":\"0\",\"4\":\"58\",\"5\":\"57\",\"6\":\"1\",\"_rn_\":\"3\"},{\"1\":\"4\",\"2\":\"1\",\"3\":\"0\",\"4\":\"70\",\"5\":\"69\",\"6\":\"1\",\"_rn_\":\"4\"},{\"1\":\"5\",\"2\":\"1\",\"3\":\"0\",\"4\":\"87\",\"5\":\"86\",\"6\":\"1\",\"_rn_\":\"5\"},{\"1\":\"6\",\"2\":\"1\",\"3\":\"0\",\"4\":\"92\",\"5\":\"91\",\"6\":\"1\",\"_rn_\":\"6\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nLastly, netwrite() returns measurement at the node level as a dataframe of values and a plot of distributions. Certain measurements are computed only under certain weight and edge direction conditions - that is, the nodelist only contains measurements appropriate to the network features.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(node_measures) %>% rmarkdown::paged_table()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"id\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"attr\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"weak_membership\"],\"name\":[3],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"in_largest_weak\"],\"name\":[4],\"type\":[\"lgl\"],\"align\":[\"right\"]},{\"label\":[\"strong_membership\"],\"name\":[5],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"in_largest_strong\"],\"name\":[6],\"type\":[\"lgl\"],\"align\":[\"right\"]},{\"label\":[\"total_degree\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"weighted_degree\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"in_degree\"],\"name\":[9],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"out_degree\"],\"name\":[10],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"weighted_indegree\"],\"name\":[11],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"weighted_outdegree\"],\"name\":[12],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"closeness\"],\"name\":[13],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"binarized_betweenness\"],\"name\":[14],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"betweenness\"],\"name\":[15],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"bonpow\"],\"name\":[16],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"bonpow_negative\"],\"name\":[17],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"eigen_centrality\"],\"name\":[18],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"component\"],\"name\":[19],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"burt_constraint\"],\"name\":[20],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"burt_hierarchy\"],\"name\":[21],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"effective_size\"],\"name\":[22],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"proportion_reachable_in\"],\"name\":[23],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"proportion_reachable_out\"],\"name\":[24],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"proportion_reachable_all\"],\"name\":[25],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"in_largest_bicomponent\"],\"name\":[26],\"type\":[\"lgl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"0\",\"2\":\"1\",\"3\":\"1\",\"4\":\"TRUE\",\"5\":\"171\",\"6\":\"FALSE\",\"7\":\"13\",\"8\":\"13\",\"9\":\"0\",\"10\":\"13\",\"11\":\"0\",\"12\":\"13\",\"13\":\"22.250000\",\"14\":\"0\",\"15\":\"0\",\"16\":\"4.4649993\",\"17\":\"4.3274746\",\"18\":\"4.721009e-01\",\"19\":\"1\",\"20\":\"0.1303632\",\"21\":\"0.07052337\",\"22\":\"13\",\"23\":\"0.004878049\",\"24\":\"0.170731707\",\"25\":\"0.585365854\",\"26\":\"TRUE\",\"_rn_\":\"1\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"1\",\"4\":\"TRUE\",\"5\":\"170\",\"6\":\"FALSE\",\"7\":\"4\",\"8\":\"4\",\"9\":\"0\",\"10\":\"4\",\"11\":\"0\",\"12\":\"4\",\"13\":\"6.666667\",\"14\":\"0\",\"15\":\"0\",\"16\":\"1.1039468\",\"17\":\"1.2566261\",\"18\":\"9.601053e-02\",\"19\":\"1\",\"20\":\"0.3281250\",\"21\":\"0.05453950\",\"22\":\"4\",\"23\":\"0.004878049\",\"24\":\"0.053658537\",\"25\":\"0.585365854\",\"26\":\"TRUE\",\"_rn_\":\"2\"},{\"1\":\"2\",\"2\":\"3\",\"3\":\"12\",\"4\":\"FALSE\",\"5\":\"169\",\"6\":\"FALSE\",\"7\":\"0\",\"8\":\"0\",\"9\":\"0\",\"10\":\"0\",\"11\":\"0\",\"12\":\"0\",\"13\":\"0.000000\",\"14\":\"0\",\"15\":\"0\",\"16\":\"NA\",\"17\":\"NA\",\"18\":\"NA\",\"19\":\"NA\",\"20\":\"1.0000000\",\"21\":\"NA\",\"22\":\"0\",\"23\":\"0.004878049\",\"24\":\"0.004878049\",\"25\":\"0.004878049\",\"26\":\"NA\",\"_rn_\":\"3\"},{\"1\":\"3\",\"2\":\"4\",\"3\":\"13\",\"4\":\"FALSE\",\"5\":\"168\",\"6\":\"FALSE\",\"7\":\"0\",\"8\":\"0\",\"9\":\"0\",\"10\":\"0\",\"11\":\"0\",\"12\":\"0\",\"13\":\"0.000000\",\"14\":\"0\",\"15\":\"0\",\"16\":\"NA\",\"17\":\"NA\",\"18\":\"NA\",\"19\":\"NA\",\"20\":\"1.0000000\",\"21\":\"NA\",\"22\":\"0\",\"23\":\"0.004878049\",\"24\":\"0.004878049\",\"25\":\"0.004878049\",\"26\":\"NA\",\"_rn_\":\"4\"},{\"1\":\"4\",\"2\":\"5\",\"3\":\"1\",\"4\":\"TRUE\",\"5\":\"166\",\"6\":\"FALSE\",\"7\":\"1\",\"8\":\"1\",\"9\":\"0\",\"10\":\"1\",\"11\":\"0\",\"12\":\"1\",\"13\":\"1.000000\",\"14\":\"0\",\"15\":\"0\",\"16\":\"0.1427034\",\"17\":\"0.2878193\",\"18\":\"4.552939e-06\",\"19\":\"1\",\"20\":\"1.0000000\",\"21\":\"1.00000000\",\"22\":\"1\",\"23\":\"0.004878049\",\"24\":\"0.009756098\",\"25\":\"0.585365854\",\"26\":\"NA\",\"_rn_\":\"5\"},{\"1\":\"5\",\"2\":\"6\",\"3\":\"14\",\"4\":\"FALSE\",\"5\":\"165\",\"6\":\"FALSE\",\"7\":\"0\",\"8\":\"0\",\"9\":\"0\",\"10\":\"0\",\"11\":\"0\",\"12\":\"0\",\"13\":\"0.000000\",\"14\":\"0\",\"15\":\"0\",\"16\":\"NA\",\"17\":\"NA\",\"18\":\"NA\",\"19\":\"NA\",\"20\":\"1.0000000\",\"21\":\"NA\",\"22\":\"0\",\"23\":\"0.004878049\",\"24\":\"0.004878049\",\"25\":\"0.004878049\",\"26\":\"NA\",\"_rn_\":\"6\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\nnode_measure_plot\n```\n\n::: {.cell-output-display}\n![](vignette_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "vignette_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}