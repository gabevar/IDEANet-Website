library(ideanet)
data(fauxmesa)
netwrite(data_type = "edgelist",
i_elements = fauxmesa_edges$from,
j_elements = fauxmesa_edges$to,
directed = T,
nodelist = fauxmesa_nodes,
node_id = "id",
net_name = "fauxmesa_network")
igraph::V(fauxmesa_network)$race
igraph::V(fauxmesa_network)$race
fauxmesa_nodes
fauxmesa_network
igraph::V(fauxmesa_network)$race
fauxmesa_nodes
fauxmesa_network
igraph::V(fauxmesa_network)$name
fauxmesa_nodes
fauxmesa_network
igraph::V(fauxmesa_network)$id
setdiff(fauxmesa_nodes$id, igraph::V(fauxmesa_network)$id)
fauxmesa_edges
distinct(fauxmesa_edges$from)
unique(fauxmesa_edges$from)
c(unique(fauxmesa_edges$from), unique(fauxmesa_edges$to))
t <- c(unique(fauxmesa_edges$from), unique(fauxmesa_edges$to))
setdiff(t, fauxmesa_nodes$id)
setdiff(fauxmesa_nodes$id, t)
t
fauxmesa_nodes$id
setdiff(fauxmesa_nodes$id, t)
fauxmesa_nodes$id
t
setdiff(fauxmesa_nodes$id, t)
plot(fauxmesa_network)
fauxmesa_nodes
install_github("https://github.com/Tom-Wolff/ideanet/tree/main_dev")
library(devtools)
install_github("https://github.com/Tom-Wolff/ideanet/tree/main_dev")
library(ideanet)
data(fauxmesa)
netwrite(data_type = "edgelist",
i_elements = fauxmesa_edges$from,
j_elements = fauxmesa_edges$to,
directed = T,
nodelist = fauxmesa_nodes,
node_id = "id",
net_name = "fauxmesa_network")
netwrite(data_type = "edgelist",
i_elements = fauxmesa_edges$from,
j_elements = fauxmesa_edges$to,
directed = T,
nodelist = fauxmesa_nodes,
node_id = "id",
net_name = "fauxmesa_network")
library(ideanet)
data(fauxmesa)
netwrite(data_type = "edgelist",
i_elements = fauxmesa_edges$from,
j_elements = fauxmesa_edges$to,
directed = T,
nodelist = fauxmesa_nodes,
node_id = "id",
net_name = "fauxmesa_network")
igraph::V(fauxmesa_network)$race
library(devtools)
install_github("https://github.com/Tom-Wolff/ideanet")
library(ideanet)
library(dplyr)
data(package = "ideanet")
?netwrite()
netwrite(data_type = "edgelist",
i_elements = fauxmesa_edges$from,
j_elements = fauxmesa_edges$to,
directed = T)
setdiff(fauxmesa_nodes$id, fauxmesa_edges$from) %>% head()
rm(list=ls()) # get a clean slate
data(fauxmesa) # bring in our data again
netwrite(data_type = "edgelist",
i_elements = fauxmesa_edges$from,
j_elements = fauxmesa_edges$to,
directed = T,
nodelist = fauxmesa_nodes,
node_id = "id",
net_name = "fauxmesa_network")
fauxmesa_network
fauxmesa_nodes
fauxmesa_network
fauxmesa_network
rm(list=ls()) # get a clean slate
data(florentine) # bring in our florentine families data
florentine <- florentine %>%
mutate(layer = case_when(layer == 1 ~ "marriage", T ~ "business"))
head(florentine, 10)
head(florentine, 10)
fauxmesa_network
fauxmesa_network
netwrite(data_type = "edgelist",
i_elements = fauxmesa_edges$from,
j_elements = fauxmesa_edges$to,
directed = T,
nodelist = fauxmesa_nodes,
node_id = "id",
net_name = "fauxmesa_network")
library(devtools)
install_github("https://github.com/Tom-Wolff/ideanet")
library(ideanet)
library(dplyr)
data(package = "ideanet")
data(fauxmesa)
head(fauxmesa_edges)
head(fauxmesa_nodes)
?netwrite()
netwrite(data_type = "edgelist",
i_elements = fauxmesa_edges$from,
j_elements = fauxmesa_edges$to,
directed = T)
setdiff(fauxmesa_nodes$id, fauxmesa_edges$from) %>% head()
rm(list=ls()) # get a clean slate
data(fauxmesa) # bring in our data again
netwrite(data_type = "edgelist",
i_elements = fauxmesa_edges$from,
j_elements = fauxmesa_edges$to,
directed = T,
nodelist = fauxmesa_nodes,
node_id = "id",
net_name = "fauxmesa_network")
fauxmesa_network
V(fauxmesa_network)$race
igraph::V(fauxmesa_network)$race
fauxmesa_nodes
install_github("Tom-Wolff/ideanet", ref = "main_dev")
rm(list=ls()) # get a clean slate
data(fauxmesa) # bring in our dat
netwrite(data_type = "edgelist",
i_elements = fauxmesa_edges$from,
j_elements = fauxmesa_edges$to,
directed = T,
nodelist = fauxmesa_nodes,
node_id = "id",
net_name = "fauxmesa_network")
igraph::V(fauxmesa_network)$race
fauxmesa_network
fauxmesa_nodes
fauxmesa_network
library(ideanet)
rm(list=ls()) # get a clean slate
data(fauxmesa) # bring in our data again
netwrite(data_type = "edgelist",
i_elements = fauxmesa_edges$from,
j_elements = fauxmesa_edges$to,
directed = T,
nodelist = fauxmesa_nodes,
node_id = "id",
net_name = "fauxmesa_network")
igraph::V(fauxmesa_network)$race
library(devtools)
install_github("Tom-Wolff/ideanet", ref = "main_dev")
library(ideanet)
library(dplyr)
rm(list=ls()) # get a clean slate
data(fauxmesa) # bring in our data again
netwrite(data_type = "edgelist",
i_elements = fauxmesa_edges$from,
j_elements = fauxmesa_edges$to,
directed = T,
nodelist = fauxmesa_nodes,
node_id = "id",
net_name = "fauxmesa_network")
igraph::V(fauxmesa_network)$race
fauxmesa_network
library(devtools)
install_github("Tom-Wolff/ideanet", ref = "main_dev")
library(devtools)
library(ideanet)
library(dplyr)
rm(list=ls()) # get a clean slate
data(fauxmesa) # bring in our data again
netwrite(data_type = "edgelist",
i_elements = fauxmesa_edges$from,
j_elements = fauxmesa_edges$to,
directed = T,
nodelist = fauxmesa_nodes,
node_id = "id",
net_name = "fauxmesa_network")
system_measure_plot
system_level_measures %>% rmarkdown::paged_table()
plot(fauxmesa_network, vertex.label = NA, vertex.size = 3, edge.arrow.size = 0.2)
plot(largest_component, vertex.label = NA, vertex.size = 3, edge.arrow.size = 0.2,
main = "largest component")
plot(largest_bi_component, vertex.label = NA, vertex.size = 3, edge.arrow.size = 0.2,
main = "largest bi-component")
head(edgelist) %>% rmarkdown::paged_table()
head(node_measures) %>% rmarkdown::paged_table()
node_measure_plot
rm(list=ls()) # get a clean slate
data(florentine) # bring in our florentine families data
florentine <- florentine %>%
mutate(layer = case_when(layer == 1 ~ "marriage", T ~ "business"))
head(florentine, 10)
netwrite(data_type = "edgelist",
i_elements = florentine$node,
j_elements = florentine$target,
directed = F,
type = florentine$layer, # indicate layer variable
net_name = "florentine_network")
head(edgelist) %>% rmarkdown::paged_table()
summary(edgelist_list)
node_measures %>%
dplyr::select(id, total_degree, marriage_total_degree, business_total_degree) %>%
rmarkdown::paged_table()
summary(network_list) # Check in which position each sub-network is
par(mfrow = c(2, 2), mar = c(1, 1, 1, 1))
set.seed(123)
plot(network_list$summary_graph, vertex.label = NA, vertex.size = 4, edge.arrow.size = 0.2,
vertex.color = "red", main = "Aggregate network")
plot(network_list$marriage, vertex.label = NA, vertex.size = 4, edge.arrow.size = 0.2,
vertex.color = "gray", main = "Marriage network")
plot(network_list$business, vertex.label = NA, vertex.size = 4, edge.arrow.size = 0.2,
vertex.color = "green", main = "Business network")
rm(list=ls()) # get a clean slate
data(fauxmesa)
netwrite(data_type = "edgelist",
i_elements = fauxmesa_edges$from,
j_elements = fauxmesa_edges$to,
directed = T,
nodelist = fauxmesa_nodes,
node_id = "id",
net_name = "fauxmesa_network")
igraph::V(fauxmesa_network)$race
igraph::V(fauxmesa_network)$race
igraph::V(fauxmesa_network)$race %>% head()
igraph::V(fauxmesa_network)$gender %>% head()
fauxmesa_network
igraph::V(fauxmesa_network)$sex %>% head()
qap_setup(net = fauxmesa_network,
variables = c("race", "sex"),
methods = c("multi_category", "reduced_category"),
directed = T)
summary(qap_results)
qap_results[[3]]
qap_results
summary(qap_results)
qap_results[[3]]
qap_results[[3]] %>% select(-weight)
qap_results[[3]] %>% rmarkdown::paged_table()
qap_setup(net = fauxmesa_network,
variables = c("race", "sex"),
methods = c("reduced_category", "multi_category"),
directed = T)
qap_results[[3]] %>% rmarkdown::paged_table()
qap_setup(net = fauxmesa_network,
variables = c("race", "sex"),
methods = c("multi_category", "reduced_category"),
directed = T)
qap_results[[3]] %>% rmarkdown::paged_table()
qap_results[[1]
]
qap_run(net = qap_results[[1]],
variables = c("sex", "race"),
dependent = NULL,
directed = T,
reps = 500,
family = "linear")
?qap_run
qap_run(net = qap_results[[1]],
variables = c("sex", "race"),
dependent = NULL,
directed = T,
family = "linear")
qap_results[[1]]
qap_run(net = qap_results[[1]],
variables = c("same_sex", "both_race_White"),
dependent = NULL,
directed = T,
family = "linear")
model_results[[1]]
model_results
model_results[[1]]
??neatread
netread(path = "/Users/gabe/Documents/Projects/IDEAnet/data/edges_ideanet_test.csv")
netread(path = "/Users/gabe/Documents/Projects/IDEAnet/data/edges_ideanet_test.csv",
filetype = "csv")
netread(path = "/Users/gabe/Documents/Projects/IDEAnet/data/edges_ideanet_test.csv",
filetype = "csv",
format = "edgelist")
rm(list=ls()) # get a clean slate
netread(path = "/Users/gabe/Documents/Projects/IDEAnet/data/edges_ideanet_test.csv",
filetype = "csv",
format = "edgelist")
View(network_edgelist)
rm(list=ls()) # get a clean slate
netread(path = "/Users/gabe/Documents/Projects/IDEAnet/data/edges_ideanet_test.csv",
filetype = "csv",
format = "edgelist",
net_name = "testnetwork")
View(testnetwork_nodelist)
View(testnetwork_edgelist)
View(testnetwork_nodelist)
rm(list=ls()) # get a clean slate
netread(path = "/Users/gabe/Documents/Projects/IDEAnet/data/edges_ideanet_test.csv",
filetype = "csv",
format = "edgelist",
net_name = "testnetwork",
nodelist = "/Users/gabe/Documents/Projects/IDEAnet/data/nodes_ideanet_test.csv")
View(testnetwork_nodelist)
