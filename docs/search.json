[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introducing IDEANet - Integrating Data Exchange and Analysis for Networks",
    "section": "",
    "text": "TEST TEXT\nOver the last 40 years, network analysis has emerged as a prominent approach to data-intensive research. Despite this steady growth and investment, network analysis remains something of a niche specialty that can exclude novice users who usually only receive standard statistical training. Moreover, since much of the growth in network science has tended to be field-specific, tools and formats have developed independently across disciplines. The multiplicity of formats and sensitivity of social data makes existing records difficult to share across scholars in the field, limiting the opportunity for new findings on the already accumulated body of network data. IDEANet - Integrating Data Exchange and Analysis for Networks - aims to maximize scientific discovery in human network science by significantly lowering the analytic and access barriers-to-entry for researchers. IDEANet is supported by the National Science Foundation as part of the Human Networks and Data Science - Infrastructure program (BCS-2024271 and BCS-2140024).\nIDEAnet features three key components (1) a suite of analysis tools developed in R which automatically generate standardized network analytic measures (2) a GUI (Graphical User Interface) which gives access to the aforementioned measurements through an easy-to-use menu-based program and (3) a secure data repository that routinizes the capacity for archiving and accessing network data, including sensitive data.\nThe analysis tools are distributed as a package and built with real-world data constraints in mind to allow novice users the ability to gain substantive results as efficiently (but still accurately) as possible. Core metrics comprise 17 node-level measurement (e.g., degree, centralities, reachability) in addition to 27 system-level metrics (e.g., network size, dyad census, transitivity). Additional modules include multiple regression QAP, multi-relational blockmodeling and a community-detection routine that partitions the network based on 10 commonly used methods and evaluates their concordance using CHAMP. Further modules are in development including meta-population disease simulation and dynamic network diffusion simulation.\nThe secure data repository is hosted on Dataverse in collaboration with Duke University Library. Researchers are often interested in sharing their data but can be limited by strict institutional requirements. Our repository facilitates this transition by offering three levels of data security: Open access, Secure non-restricted, and Secure use-restricted. Secure non-restricted data include some level of confidentiality such that investigators require IRB approval for access. Secure use-restricted data requires both IRB approval for use and further substantive limitations required by the data owner. To accommodate the diversity in requirements, IDEAnet makes use of the imPACT architecture – a \"notary service\" that seamlessly matches user certification and data access requirements.\nThe difficult learning curve involved in learning network tools means that researchers with substantive interests in network processes but who are not specially trained in network methods must either invest heavily in training or risk serious analytic errors. The goal of IDEANet is to provide an integrated network data analysis framework within R that capitalizes on the best of current tools while building robust safeguards against common data and analytic errors.\nThis website serves as the home for IDEANet and contains vignettes describing how to use the package in R, navigate the GUI and access the data repository. If you have any questions, feel free to use the contact information located in our Contact Us page.\n\n\n\n Back to top"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html#introducing-ideanet---integrating-data-exchange-and-analysis-for",
    "href": "index.html#introducing-ideanet---integrating-data-exchange-and-analysis-for",
    "title": "Introducing IDEANet - Integrating Data Exchange and Analysis for Networks",
    "section": "",
    "text": "Networks\nOver the last 40 years, network analysis has emerged as a prominent approach to data-intensive research. Despite this steady growth and investment, network analysis remains something of a niche specialty that can exclude novice users who usually only receive standard statistical training. Moreover, since much of the growth in network science has tended to be field-specific, tools and formats have developed independently across disciplines. The multiplicity of formats and sensitivity of social data makes existing records difficult to share across scholars in the field, limiting the opportunity for new findings on the already accumulated body of network data. IDEANet - Integrating Data Exchange and Analysis for Networks - aims to maximize scientific discovery in human network science by significantly lowering the analytic and access barriers-to-entry for researchers. IDEANet is supported by the National Science Foundation as part of the Human Networks and Data Science - Infrastructure program (BCS-2024271 and BCS-2140024).\nIDEAnet features three key components (1) a suite of analysis tools developed in R which automatically generate standardized network analytic measures (2) a GUI (Graphical User Interface) which gives access to the aforementioned measurements through an easy-to-use menu-based program and (3) a secure data repository that routinizes the capacity for archiving and accessing network data, including sensitive data.\nThe analysis tools are distributed as a package and built with real-world data constraints in mind to allow novice users the ability to gain substantive results as efficiently (but still accurately) as possible. Core metrics comprise 17 node-level measurement (e.g., degree, centralities, reachability) in addition to 27 system-level metrics (e.g., network size, dyad census, transitivity). Additional modules include multiple regression QAP, multi-relational blockmodeling and a community-detection routine that partitions the network based on 10 commonly used methods and evaluates their concordance using CHAMP. Further modules are in development including meta-population disease simulation and dynamic network diffusion simulation.\nThe secure data repository is hosted on Dataverse in collaboration with Duke University Library. Researchers are often interested in sharing their data but can be limited by strict institutional requirements. Our repository facilitates this transition by offering three levels of data security: Open access, Secure non-restricted, and Secure use-restricted. Secure non-restricted data include some level of confidentiality such that investigators require IRB approval for access. Secure use-restricted data requires both IRB approval for use and further substantive limitations required by the data owner. To accommodate the diversity in requirements, IDEAnet makes use of the imPACT architecture – a \"notary service\" that seamlessly matches user certification and data access requirements.\nThe difficult learning curve involved in learning network tools means that researchers with substantive interests in network processes but who are not specially trained in network methods must either invest heavily in training or risk serious analytic errors. The goal of IDEANet is to provide an integrated network data analysis framework within R that capitalizes on the best of current tools while building robust safeguards against common data and analytic errors."
  },
  {
    "objectID": "contact_us.html",
    "href": "contact_us.html",
    "title": "Contact Us",
    "section": "",
    "text": "Contact information:\n\n\n\n Back to top"
  },
  {
    "objectID": "vignette.html",
    "href": "vignette.html",
    "title": "R Vignette",
    "section": "",
    "text": "The goal of the IDEANet program is to lower the barrier of entry to network analysis for scholars interested in relational measurement. Some researchers may have data and questions that are suitable to network analysis. And yet, getting comfortable with the tools available in R can prove to be an arduous and time consuming task.\nIDEANet is a set of functions which leverages existing network analysis packages in R (igraph, network, sna) to provide high quality measurements seamlessly from the starting data. The team behind IDEANet in collaboration with the Duke University Library Services have also created a repository of publicly available network datasets which researchers can pull from or host their own data. If you are interested in hosting your own data, feel free to fill out the form available on our Database page.\nIDEANet is supported by the National Science Foundation as part of the Human Networks and Data Science - Infrastructure program (BCS-2024271 and BCS-2140024)."
  },
  {
    "objectID": "vignette.html#setting-up-ideanet",
    "href": "vignette.html#setting-up-ideanet",
    "title": "IDEANet R Vignette",
    "section": "Setting up IDEANet",
    "text": "Setting up IDEANet\nLets begin by importing IDEANet. IDEANet is currently available only as a Github package and requires a direct download using devtools.\n\nlibrary(devtools)\n\nLoading required package: usethis\n\ninstall_github(\"https://github.com/Tom-Wolff/ideanet\")\n\nSkipping install of 'ideanet' from a github remote, the SHA1 (a5f256cd) has not changed since last install.\n  Use `force = TRUE` to force installation\n\nlibrary(ideanet)\n\nIn this vignette, we will be using the datasets included with the package. IDEANet comes with a variety of datasets we can explore using the data() function\n\ndata(package = \"ideanet\")\n\nIn this vignette, we will use the Fauxmesa dataset. The data represents a simulation of friendships among students in a school.\n\ndata(fauxmesa)\n\nhead(fauxmesa_edges)\n\n  from to\n1    1 25\n2    1 52\n3    1 58\n4    1 70\n5    1 87\n6    1 92\n\nhead(fauxmesa_nodes)\n\n  id grade  race sex\n1  1     7  Hisp   F\n2  2     7  Hisp   F\n3  3    11 NatAm   M\n4  4     8  Hisp   M\n5  5    10 White   F\n6  6    10  Hisp   F"
  },
  {
    "objectID": "vignette.html#running-netwrite",
    "href": "vignette.html#running-netwrite",
    "title": "R Vignette",
    "section": "Running netwrite()",
    "text": "Running netwrite()\nThe central analysis component of IDEANet is accessed via the netwrite() function. Netwrite() comes with a breadth of arguments described in the netwrite() documentation. The documentation can be accessed with the following code, or by via our webpage (link).\n\n?netwrite()\n\nReturning to our high-school example, we can ask IDEANet to return basic network measurements on the network by including some basic arguments: what kind of network object we are using – in this case, an edgelist – and some information about sources, targets and their directionality.\n\nnetwrite(data_type = \"edgelist\", \n         i_elements = fauxmesa_edges$from, \n         j_elements = fauxmesa_edges$to,\n         directed = T)\n\n(Bonacich power centrality) Adjacency matrix for network is singular. Network will be treated as undirected in order to calculate measures\n\n(Bonacich power centrality) Adjacency matrix for network is singular. Network will be treated as undirected in order to calculate measures\n\n\n(Eigenvector centrality) Adjacency matrix for network is singular. Network will be treated as undirected in order to calculate measures\n\n\n(Eigenvector centrality) Network consists of 2+ unconnected components. Eigenvector centrality scores will be calculated for nodes based on their position within their respective components.\n\n\nNetwrite() includes a series of warnings that warns you about the way certain measurements are calculated. In this case, while most metrics are calculated as directed (as we requested in the function), some functions such as power centrality and eigenvector centrality require interpreting the network as undirected.\nWhile this successfully returned the metric we will be exploring further in this vignette, netwrite() has additional quality of life arguments that we can use with our example. For example, we want to include node level attributes and change the name of our output network.\nHowever, notice that there are students in our nodelist that don’t exist in our edgelist.\n\nsetdiff(fauxmesa_nodes$id, fauxmesa_edges$from) %&gt;% head()\n\n[1]  3  4  6  7 10 12\n\n\nThis is usually difficult for igraph to handle. In this case, netwrite() will consider additional student’s as isolates in the network, and provide a warning that it is doing so.\n\nrm(list=ls()) # get a clean slate\n\ndata(fauxmesa) # bring in our data again\n\nnetwrite(data_type = \"edgelist\", \n         i_elements = fauxmesa_edges$from, \n         j_elements = fauxmesa_edges$to,\n         directed = T,\n         nodelist = fauxmesa_nodes$id,\n         net_name = \"fauxmesa_network\")\n\n(Bonacich power centrality) Isolates detected in network. Isolates will be removed from network when calculating power centrality measure, and will be assigned NA values in final output.\n\n\n(Bonacich power centrality) Adjacency matrix for network is singular. Network will be treated as undirected in order to calculate measures\n\n\n(Bonacich power centrality) Isolates detected in network. Isolates will be removed from network when calculating power centrality measure, and will be assigned NA values in final output.\n\n\n(Bonacich power centrality) Adjacency matrix for network is singular. Network will be treated as undirected in order to calculate measures\n\n\n(Eigenvector centrality) Isolates detected in network. Isolates will be removed from network when calculating eigenvector centrality measure, and will be assigned NA values in final output.\n\n\n(Eigenvector centrality) Adjacency matrix for network is singular. Network will be treated as undirected in order to calculate measures\n\n\n(Eigenvector centrality) Network consists of 2+ unconnected components. Eigenvector centrality scores will be calculated for nodes based on their position within their respective components."
  },
  {
    "objectID": "vignette.html#netwrite-interpretation",
    "href": "vignette.html#netwrite-interpretation",
    "title": "R Vignette",
    "section": "Netwrite() interpretation",
    "text": "Netwrite() interpretation\nNetwrite() offers a variety of outputs that facilitate a clear interpretation of the network structure. Starting from the top, the output contains system level measures that tell the researcher about the network’s overall characteristics.\n\nsystem_measure_plot\n\n\n\n\nThese measurements are also available in traditional table form.\n\nsystem_level_measures %&gt;% rmarkdown::paged_table()\n\n\n\n  \n\n\n\nNetwrite() also outputs a graph object that contains each node and edge-level measurement computed within the function. This graph object allows for traditional network manipulation, such as plotting.\n\nplot(fauxmesa_network, vertex.label = NA, vertex.size = 3, edge.arrow.size = 0.2)\n\n\n\n\nNote that the output network can contain both isolates and self-loops. Isolates were included when we defined a list of node ids (including isolate) in the “nodelist” argument of netwrite(). There is currently no method for removing self-loops within netwrite() - instead, the user is expected to remove any unwanted edges before reading them into netwrite().\nIn addition to the full network, researchers may be interested in the shape of major sub-components. Netwrite outputs two additional graph objects: the largest component in the network.\n\nplot(largest_component, vertex.label = NA, vertex.size = 3, edge.arrow.size = 0.2, \n     main = \"largest component\")\n\n\n\n\nAnd the largest bi-component of the network.\n\nplot(largest_bi_component, vertex.label = NA, vertex.size = 3, edge.arrow.size = 0.2, \n     main = \"largest bi-component\")\n\n\n\n\nNetwrite() also outputs an edgelist dataframe of the same length as the input edges. This edgelist object contains unique dyad-level ids, internal ego and alter ids, the original id values and weights (uniformly set to 1 if no weights are defined).\n\nhead(edgelist) %&gt;% rmarkdown::paged_table()\n\n\n\n  \n\n\n\nLastly, netwrite() returns measurement at the node level as a dataframe of values and a plot of distributions. Certain measurements are computed only under certain weight and edge direction conditions - that is, the nodelist only contains measurements appropriate to the network features.\n\nhead(node_measures) %&gt;% rmarkdown::paged_table()\n\n\n\n  \n\n\nnode_measure_plot"
  }
]