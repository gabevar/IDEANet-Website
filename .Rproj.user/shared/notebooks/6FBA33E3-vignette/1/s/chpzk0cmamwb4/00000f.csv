"0","rm(list=ls()) # get a clean slate"
"0",""
"0","data(fauxmesa) # bring in our data again"
"0",""
"0","netwrite(data_type = ""edgelist"", "
"0","         i_elements = fauxmesa_edges$from, "
"0","         j_elements = fauxmesa_edges$to,"
"0","         directed = T,"
"0","         nodelist = fauxmesa_nodes,"
"0","         node_id = ""id"","
"0","         net_name = ""fauxmesa_network"")"
"2","(Bonacich power centrality) Isolates detected in network. Isolates will be removed from network when calculating power centrality measure, and will be assigned NA values in final output.
"
"2","(Bonacich power centrality) Adjacency matrix for network is singular. Network will be treated as undirected in order to calculate measures

"
"2","(Bonacich power centrality) Isolates detected in network. Isolates will be removed from network when calculating power centrality measure, and will be assigned NA values in final output.
"
"2","(Bonacich power centrality) Adjacency matrix for network is singular. Network will be treated as undirected in order to calculate measures

"
"2","(Eigenvector centrality) Isolates detected in network. Isolates will be removed from network when calculating eigenvector centrality measure, and will be assigned NA values in final output.

"
"2","(Eigenvector centrality) Adjacency matrix for network is singular. Network will be treated as undirected in order to calculate measures

"
"2","(Eigenvector centrality) Network consists of 2+ unconnected components. Eigenvector centrality scores will be calculated for nodes based on their position within their respective components.

"
"2","Warning: At core/centrality/centrality_other.c:329 : graph is directed and acyclic; eigenvector centralities will be zeros."
"2","Warning: Graph will be treated as undirected for calculation of k-core cohesion measure."
"0","igraph::V(fauxmesa_network)$race"
"1","  [1]"
"1"," ""Hisp"" "
"1"," ""Hisp"" "
"1"," ""NatAm"""
"1"," ""Hisp"" "
"1"," ""White"""
"1"," ""Hisp"" "
"1"," ""NatAm"""
"1"," ""NatAm"""
"1"," ""White"""
"1"," ""NatAm"""
"1"," ""Hisp"" "
"1"," ""Hisp"" "
"1"," ""Hisp"" "
"1"," ""Hisp"" "
"1"," ""NatAm"""
"1"," ""Hisp"" "
"1"," ""NatAm"""
"1"," ""Hisp"" "
"1"," ""White"""
"1","
"
"1"," [20]"
"1"," ""Hisp"" "
"1"," ""Hisp"" "
"1"," ""NatAm"""
"1"," ""Hisp"" "
"1"," ""NatAm"""
"1"," ""White"""
"1"," ""Hisp"" "
"1"," ""Hisp"" "
"1"," ""NatAm"""
"1"," ""NatAm"""
"1"," ""NatAm"""
"1"," ""Hisp"" "
"1"," ""Hisp"" "
"1"," ""Hisp"" "
"1"," ""White"""
"1"," ""Hisp"" "
"1"," ""Hisp"" "
"1"," ""Hisp"" "
"1"," ""Hisp"" "
"1","
"
"1"," [39]"
"1"," ""NatAm"""
"1"," ""White"""
"1"," ""Hisp"" "
"1"," ""Other"""
"1"," ""White"""
"1"," ""Hisp"" "
"1"," ""Hisp"" "
"1"," ""NatAm"""
"1"," ""NatAm"""
"1"," ""Hisp"" "
"1"," ""Hisp"" "
"1"," ""Hisp"" "
"1"," ""NatAm"""
"1"," ""NatAm"""
"1"," ""NatAm"""
"1"," ""Black"""
"1"," ""NatAm"""
"1"," ""NatAm"""
"1"," ""Hisp"" "
"1","
"
"1"," [58]"
"1"," ""Hisp"" "
"1"," ""Hisp"" "
"1"," ""Hisp"" "
"1"," ""NatAm"""
"1"," ""Hisp"" "
"1"," ""White"""
"1"," ""NatAm"""
"1"," ""NatAm"""
"1"," ""NatAm"""
"1"," ""Hisp"" "
"1"," ""Hisp"" "
"1"," ""Hisp"" "
"1"," ""NatAm"""
"1"," ""Hisp"" "
"1"," ""NatAm"""
"1"," ""Hisp"" "
"1"," ""Black"""
"1"," ""NatAm"""
"1"," ""Hisp"" "
"1","
"
"1"," [77]"
"1"," ""NatAm"""
"1"," ""NatAm"""
"1"," ""NatAm"""
"1"," ""Hisp"" "
"1"," ""Hisp"" "
"1"," ""Hisp"" "
"1"," ""Hisp"" "
"1"," ""Hisp"" "
"1"," ""Hisp"" "
"1"," ""Hisp"" "
"1"," ""White"""
"1"," ""Hisp"" "
"1"," ""White"""
"1"," ""NatAm"""
"1"," ""Hisp"" "
"1"," ""NatAm"""
"1"," ""Hisp"" "
"1"," ""NatAm"""
"1"," ""Hisp"" "
"1","
"
"1"," [96]"
"1"," ""NatAm"""
"1"," ""Hisp"" "
"1"," ""NatAm"""
"1"," ""NatAm"""
"1"," ""Hisp"" "
"1"," ""White"""
"1"," ""NatAm"""
"1"," ""Hisp"" "
"1"," ""White"""
"1"," ""NatAm"""
"1"," ""Hisp"" "
"1"," ""Hisp"" "
"1"," ""Hisp"" "
"1"," ""Hisp"" "
"1"," ""Hisp"" "
"1"," ""Hisp"" "
"1"," ""Hisp"" "
"1"," ""NatAm"""
"1"," ""NatAm"""
"1","
"
"1","[115]"
"1"," ""Hisp"" "
"1"," ""NatAm"""
"1"," ""NatAm"""
"1"," ""Black"""
"1"," ""White"""
"1"," ""Hisp"" "
"1"," ""Hisp"" "
"1"," ""NatAm"""
"1"," ""Black"""
"1"," ""Hisp"" "
"1"," ""NatAm"""
"1"," ""Hisp"" "
"1"," ""Hisp"" "
"1"," ""Hisp"" "
"1"," ""Hisp"" "
"1"," ""Hisp"" "
"1"," ""Hisp"" "
"1"," ""Hisp"" "
"1"," ""Hisp"" "
"1","
"
"1","[134]"
"1"," ""Hisp"" "
"1"," ""Hisp"" "
"1"," ""NatAm"""
"1"," ""NatAm"""
"1"," ""NatAm"""
"1"," ""NatAm"""
"1"," ""Hisp"" "
"1"," ""White"""
"1"," ""Hisp"" "
"1"," ""Hisp"" "
"1"," ""Hisp"" "
"1"," ""Hisp"" "
"1"," ""Other"""
"1"," ""Hisp"" "
"1"," ""Hisp"" "
"1"," ""NatAm"""
"1"," ""Hisp"" "
"1"," ""Hisp"" "
"1"," ""Hisp"" "
"1","
"
"1","[153]"
"1"," ""NatAm"""
"1"," ""Other"""
"1"," ""NatAm"""
"1"," ""White"""
"1"," ""NatAm"""
"1"," ""Hisp"" "
"1"," ""Other"""
"1"," ""Black"""
"1"," ""Hisp"" "
"1"," ""NatAm"""
"1"," ""Hisp"" "
"1"," ""NatAm"""
"1"," ""Hisp"" "
"1"," ""White"""
"1"," ""Hisp"" "
"1"," ""NatAm"""
"1"," ""Hisp"" "
"1"," ""NatAm"""
"1"," ""NatAm"""
"1","
"
"1","[172]"
"1"," ""White"""
"1"," ""NatAm"""
"1"," ""Hisp"" "
"1"," ""NatAm"""
"1"," ""Hisp"" "
"1"," ""NatAm"""
"1"," ""Hisp"" "
"1"," ""Hisp"" "
"1"," ""NatAm"""
"1"," ""Hisp"" "
"1"," ""Hisp"" "
"1"," ""Hisp"" "
"1"," ""NatAm"""
"1"," ""Hisp"" "
"1"," ""Hisp"" "
"1"," ""Hisp"" "
"1"," ""Hisp"" "
"1"," ""NatAm"""
"1"," ""Hisp"" "
"1","
"
"1","[191]"
"1"," ""NatAm"""
"1"," ""Hisp"" "
"1"," ""NatAm"""
"1"," ""White"""
"1"," ""Hisp"" "
"1"," ""Hisp"" "
"1"," ""Hisp"" "
"1"," ""Hisp"" "
"1"," ""Hisp"" "
"1"," ""NatAm"""
"1"," ""NatAm"""
"1"," ""Hisp"" "
"1"," ""NatAm"""
"1"," ""Black"""
"1"," ""NatAm"""
"1","
"
