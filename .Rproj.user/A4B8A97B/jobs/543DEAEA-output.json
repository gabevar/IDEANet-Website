[2,"\n"]
[1,"\u001B[31m\n\nprocessing file: vignette.qmd\n\u001B[39m"]
[1,"1/47                   \n2/47 [unnamed-chunk-1] \n"]
[1,"3/47                   \n4/47 [unnamed-chunk-2] \n"]
[1,"Data sets in package 'ideanet':\n\nfauxmesa_edges (fauxmesa)\n                        \nfauxmesa_nodes (fauxmesa)\n                        \nflorentine              \nhightech                \nmarvel                  \n\n"]
[1,"5/47                   \n6/47 [unnamed-chunk-3] \n"]
[1,"7/47                   \n8/47 [unnamed-chunk-4] \n"]
[1,"netwrite                package:ideanet                R Documentation\n\n_\bN_\be_\bt_\bw_\bo_\br_\bk _\bC_\bl_\be_\ba_\bn_\bi_\bn_\bg _\ba_\bn_\bd _\bV_\ba_\br_\bi_\ba_\bb_\bl_\be _\bC_\ba_\bl_\bc_\bu_\bl_\ba_\bt_\bi_\bo_\bn ('_\bn_\be_\bt_\bw_\br_\bi_\bt_\be')\n\n_\bD_\be_\bs_\bc_\br_\bi_\bp_\bt_\bi_\bo_\bn:\n\n     The `netwrite` function reads in relational data of several\n     formats and processes them into a set of standardized outputs.\n     These outputs include sets of commonly calculated measures at the\n     individual node and network-wide levels.\n\n_\bU_\bs_\ba_\bg_\be:\n\n     netwrite(\n       data_type = c(\"edgelist\"),\n       adjacency_matrix = FALSE,\n       adjacency_list = FALSE,\n       nodelist = FALSE,\n       node_id = NULL,\n       i_elements = FALSE,\n       j_elements = FALSE,\n       fix_nodelist = TRUE,\n       weights = NULL,\n       type = NULL,\n       remove_loops = FALSE,\n       package = \"igraph\",\n       missing_code = 99999,\n       weight_type = \"frequency\",\n       directed = FALSE,\n       net_name = \"network\",\n       shiny = FALSE,\n       output = c(\"graph\", \"largest_bi_component\", \"largest_component\", \"node_measure_plot\",\n         \"nodelist\", \"edgelist\", \"system_level_measures\", \"system_measure_plot\"),\n       message = TRUE\n     )\n     \n_\bA_\br_\bg_\bu_\bm_\be_\bn_\bt_\bs:\n\ndata_type: A character value indicating the type of relational data\n          being entered into `netwrite`. Available options are\n          `edgelist`, `adjacency_matrix`, and `adjacency_list`.\n\nadjacency_matrix: If `data_type` is set to `adjacency_matrix`, a matrix\n          object containing the adjacency matrix for the network being\n          processed.\n\nadjacency_list: If `data_type` is set to `adjacency_list`, a data frame\n          containing the adjacency list for the network being\n          processed.\n\nnodelist: Either a vector of values indicating unique node/vertex IDs,\n          or a data frame including all information about nodes in the\n          network. If\n\n node_id: If a data frame is entered for the `nodelist` arugment,\n          `node_id` should be a character value indicating the name of\n          the column in the node-level data frame containing unique\n          node identifiers.\n\ni_elements: If `data_type` is set to `edgelist`, a numeric or character\n          vector indicating the sender of ties in the edgelist.\n\nj_elements: If `data_type` is set to `edgelist`, a numeric or character\n          vector indicating the receiver of ties in the edgelist.\n\nfix_nodelist: If `data_type` is set to `edgelist` and user inputs a\n          vector or data frame into `nodelist`, a logical value\n          indicating whether to include node IDs that do not appear in\n          the nodelist but do appear in the edgelist in the nodelist\n          used when processing network data. By default, `fix_nodelist`\n          is set to `FALSE` to identify potential inconsistencies\n          between the nodelist and edgelist to the user.\n\n weights: A numeric vector indicating the weight of ties in the\n          edgelist.\n\n    type: A numeric or character vector indicating the types of\n          relationships represented in the edgelist. If `type` contains\n          this vector, `netwrite` will treat the data as a\n          multi-relational network and produce additional outputs\n          reflecting the different types of ties occuring in the\n          network.\n\nremove_loops: A logical value indicating whether \"self-loops\" (ties\n          directed toward oneself) should be considered valid ties in\n          the network being processed.\n\n package: (Deprecated) A character value indicating what format network\n          objects should be produced by `netwrite`. Available options\n          are `igraph` and `network`.\n\nmissing_code: A numeric value indicating \"missing\" values in an\n          edgelist. Such \"missing\" values are sometimes included to\n          identify the presence of isolated nodes in an edgelist when a\n          corresponding nodelist is unavailable.\n\nweight_type: A character value indicating whether edge weights should\n          be treated as frequencies or distances. Available options are\n          `frequency` and `distance`.\n\ndirected: A logical value indicating whether edges should be treated as\n          a directed or undirected when constructing the network.\n\nnet_name: A character value indicating the name to which network/igraph\n          objects should be given.\n\n   shiny: A logical value indicating whether `netwrite` is being used\n          in conjunction with IDEANet's Shiny-based visualization app.\n          Should be set to its default (`FALSE`) when not being used\n          with the Shiny app.\n\n  output: A character vector indicating the kinds of objects `netwrite`\n          should assign to the global environment. `netwrite` produces\n          several outputs that may not all be necessary to a user's\n          needs. Users can specify which outputs they specifically want\n          in order to minimize the number of objects appearing in the\n          global environment. Potential outputs include igraph\n          object(s) (`\"graph\"`), subgraph(s) of only nodes that appear\n          in the largest component and/or bicomponent of the network\n          (`\"largest_component\"`, `\"largest_bi_component\"`), data\n          frame(s) containing node-level measures\n          (`\"node_measure_plot\"`), a processed edgelist of the network\n          (`\"edgelist\"`), a data frame indicating network-level\n          summaries (`\"system_level_measures\"`), and summary\n          visualizations for node- and network-level measures\n          (`\"node_measure_plot\"`, `\"system_measure_plot\"`).\n\n message: A logical value indicating whether warning messages should be\n          displayed in the R console during processing.\n\n_\bV_\ba_\bl_\bu_\be:\n\n     `netwrite` returns a variety of outputs and assigns them to the R\n     global environment. Depending on the values assigned to the\n     `output` argument, `netwrite` will produce any or all of the\n     following:\n\n     If `output` contains `graph`, `netwrite` will return an igraph\n     object of the network represented in the original data. If a\n     vector is entered into the `type` argument, `netwrite` also\n     produces a list containing igraph objects for each unique relation\n     type as well as the overall network. These output objects are\n     named according to the value specified in the `net_name` argument.\n\n     If `output` contains `nodelist`, `netwrite` will return a\n     dataframe containing individual-level information for each node in\n     the network. This dataframe contains a set of frequently used\n     node-level measures for each node in the network. If a vector is\n     entered into the `type` argument, `netwrite` will produce these\n     node-level measures for each unique relattion type.\n\n     If `output` contains `edgelist`, `netwrite` will return a\n     formatted edgelist for the network represented in the original\n     data. If a vector is entered into the `type` argument, `netwrite`\n     also produces a list containing edgelists for each unique relation\n     type as well as the overall network.\n\n     If `output` contains `system_level_measures`, `netwrite` will\n     return a data frame providing network-level summary information.\n\n     If `output` contains `node_measure_plot`, `netwrite` will return a\n     plot summarizing the distribution of frequently used node-level\n     measures across all nodes in the network. If a vector is entered\n     into the `type` argument, `netwrite` also produces a list\n     containing node-level summary plots for each unique relation type\n     as well as the overall network.\n\n     If `output` contains `system_measure_plot`, `netwrite` will return\n     a plot summarizing the distribution of frequently used\n     network-level measures. If a vector is entered into the `type`\n     argument, `netwrite` also produces a list containing network-level\n     summary plots for each unique relation type as well as the overall\n     network.\n\n     If `output` contains `largest_bi_component`, `netwrite` will\n     return an igraph object of the largest bicomponent in the network\n     represented in the original data. If a vector is entered into the\n     `type` argument, `netwrite` also produces a list containing the\n     largest bicomponent for each unique relation type as well as the\n     overall network.\n\n     If `output` contains `largest_bi_component`, `netwrite` will\n     return an igraph object of the largest main component in the\n     network represented in the original data. If a vector is entered\n     into the `type` argument, `netwrite` also produces a list\n     containing the largest main component for each unique relation\n     type as well as the overall network.\n\n_\bE_\bx_\ba_\bm_\bp_\bl_\be_\bs:\n\n     # Use netwrite on an edgelist\n     netwrite(nodelist = fauxmesa_nodes,\n             node_id = \"id\",\n             i_elements = fauxmesa_edges$from,\n             j_elements = fauxmesa_edges$to,\n             directed = TRUE,\n             net_name = \"faux_mesa\")\n     \n     ### Inspect updated edgelist\n     head(edgelist)\n     \n     ### Inspect data frame of node-level measures\n     head(node_measures)\n     \n     ### Inspect system-level summary\n     system_level_measures\n     \n     ### Plot sociogram of network\n     plot(faux_mesa)\n     \n     ### View node-level summary visualization\n     node_measure_plot\n     \n     ### View system-level summary visualization\n     system_measure_plot\n     \n     \n     \n     # Run netwrite on an adjacency matrix\n     fauxmesa_adjmat <- as.matrix(igraph::as_adjacency_matrix(faux_mesa))\n     \n     netwrite(data_type = \"adjacency_matrix\",\n             adjacency_matrix = fauxmesa_adjmat,\n             directed = TRUE,\n             net_name = \"faux_mesa\")\n     \n     \n     # Run netwrite on a multirelational network\n     netwrite(i_elements = florentine$node,\n             j_elements = florentine$target,\n             type = florentine$layer,\n             directed = TRUE,\n             net_name = \"florentine\")\n     \n     # View system level summary for aggregate network\n     system_level_measures_list$summary_graph\n     \n     # View system level summary for network of `type 1` relations\n     system_level_measures_list$`1`\n     \n\n9/47                   \n10/47 [unnamed-chunk-5] \n"]
[1,"11/47                   \n12/47 [unnamed-chunk-6] \n13/47                   \n14/47 [unnamed-chunk-7] \n"]
[1,"15/47                   \n16/47 [unnamed-chunk-8] \n"]
[1,"17/47                   \n18/47 [unnamed-chunk-9] \n19/47                   \n20/47 [unnamed-chunk-10]\n"]
[1,"21/47                   \n22/47 [unnamed-chunk-11]\n"]
[1,"23/47                   \n24/47 [unnamed-chunk-12]\n"]
[1,"25/47                   \n26/47 [unnamed-chunk-13]\n"]
[1,"27/47                   \n28/47 [unnamed-chunk-14]\n"]
[1,"29/47                   \n30/47 [unnamed-chunk-15]\n31/47                   \n32/47 [unnamed-chunk-16]\n"]
[1,"33/47                   \n34/47 [unnamed-chunk-17]\n35/47                   \n36/47 [unnamed-chunk-18]\n"]
[1,"37/47                   \n38/47 [unnamed-chunk-19]\n"]
[1,"39/47                   \n40/47 [unnamed-chunk-20]\n"]
[1,"41/47                   \n42/47 [unnamed-chunk-21]\n43/47                   \n44/47 [unnamed-chunk-22]\n45/47                   \n46/47 [unnamed-chunk-23]\n47/47                   \n"]
[1,"\u001B[31moutput file: vignette.knit.md\n\n\u001B[39m"]
[1,"\u001B[1mpandoc \u001B[22m\n  to: html\n  output-file: vignette.html\n  standalone: true\n  title-prefix: IDEANet\n  section-divs: true\n  html-math-method: mathjax\n  wrap: none\n  default-image-extension: png\n  css:\n    - styles.css\n  toc: true\n  \n\u001B[1mmetadata\u001B[22m\n  document-css: false\n  link-citations: true\n  date-format: long\n  lang: en\n  editor: visual\n  theme: cosmo\n  title: R Vignette\n  \n"]
[1,"Output created: docs/vignette.html\n\n\u001B[1m\u001B[34mPreparing to preview\u001B[39m\u001B[22m\n\n"]
[1,"\u001B[32mWatching files for changes\u001B[39m\n\u001B[32mBrowse at \u001B[39m\u001B[4m\u001B[32mhttp://localhost:4745/vignette.html\u001B[39m\u001B[24m\n"]
[1,"\u001B[32mGET: /vignette.html\u001B[39m\n"]
[1,"\u001B[32mGET: /vignette.html\u001B[39m\n"]
[1,"\u001B[32mGET: /contact_us.html\u001B[39m\n"]
[1,"\u001B[32mGET: /\u001B[39m\n"]
